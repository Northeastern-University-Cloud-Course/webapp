name: Integration Tests

on:
  push:
    branches:
      - main

jobs:
  integration-tests:
    name: PACKER BUILD
    runs-on: ubuntu-latest


    steps:
      - name: Install MariaDB
        run: |
          sudo apt-get update
          sudo apt-get install -y mariadb-server

      - name: Start MariaDB Service
        run: sudo service mariadb start

      - name: Set up MySQL Root Password
        run: |
          sudo mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Sandeshreddy11#';"

      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build jar and run Maven
        run: |
            mvn install -DskipTests

      - name: check jar
        run: |
          cd target 
          ls 
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_KEY }}'

      - name: Run Integration Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/webapp_DB?createDatabaseIfNotExist=true
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: Sandeshreddy11#
        run: mvn -B verify

      - name: Run Packer init
        run: packer init .



      - name: Build Packer Image
        run: |
          packer build -var 'source_file=./target/application-0.0.1-SNAPSHOT.jar' test.pkr.hcl | tee packer-output.txt

      - name: Extract Image Name
        run: |
          cat packer-output.txt | grep 'A disk image was created' | awk '{print $NF}' > image-name.txt
  
      - name: Create New Instance Template with Unique Name
        run: |
          TEMPLATE_NAME="new-template-$(date +%s)"
          echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV
          IMAGE_NAME=$(cat image-name.txt)
          DISK_NAME="instance-disk"
          PROJECT="cloud-dev-415102"
          gcloud config set project $PROJECT
          output=$(gcloud compute instances list --format="table(name,zone)" | tail -n 1);instance_name=$(echo "$output" | awk '{print $1}');zone=$(echo "$output" | awk '{print $2}');
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --source-instance=projects/$PROJECT/zones/$zone/instances/$instance_name \
            --source-instance-zone=$zone \
            --instance-template-region=us-west1 \
            --configure-disk=device-name=$DISK_NAME,instantiate-from=custom-image,custom-image=projects/cloud-dev-415102/global/images/$IMAGE_NAME
  
      - name: Update Managed Instance Group
        run: |
          GROUP_MANG="my-instance-group-manager"
          gcloud compute instance-groups managed set-instance-template $GROUP_MANG \
            --template=projects/cloud-dev-415102/regions/us-west1/instanceTemplates/$TEMPLATE_NAME \
            --project=cloud-dev-415102 \
            --region="us-west1" 

      - name: Start Rolling Update
        run: |
          GROUP_MANG="my-instance-group-manager"
          gcloud compute instance-groups managed rolling-action start-update $GROUP_MANG \
            --version template=projects/cloud-dev-415102/regions/us-west1/instanceTemplates/$TEMPLATE_NAME \
            --project=cloud-dev-415102 \
            --region=us-west1

      - name: Wait for Rolling Update to Complete
        run: |
          INSTANCE_GROUP="my-instance-group-manager"
          REGION="us-west1"
          PROJECT_ID="cloud-dev-415102"
          UPDATE_FAILED=false

          while true; do
            STATUS=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP \
                      --project=$PROJECT_ID \
                      --region=$REGION \
                      --format="value(status.isStable)")

            ERRORS=$(gcloud compute instance-groups managed list-errors $INSTANCE_GROUP \
                      --project=$PROJECT_ID \
                      --region=$REGION \
                      --format="value(error.errors[].message)")

            if [ "$STATUS" == "True" ]; then
              echo "Rolling update completed successfully."
              break
            elif [ -n "$ERRORS" ]; then
              echo "Errors detected during rolling update: $ERRORS"
              UPDATE_FAILED=true
              break
            else
              echo "Waiting for rolling update to complete..."
              sleep 30
            fi
          done

          if [ "$UPDATE_FAILED" = true ]; then
            echo "Rolling update failed. Exiting with error."
            exit 1
          fi